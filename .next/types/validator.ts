// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ../../src/app/blog/[slug]/page.tsx
{
  const handler = {} as typeof import("../../src/app/blog/[slug]/page.js")
  handler satisfies AppPageConfig<"/blog/[slug]">
}

// Validate ../../src/app/blog/page.tsx
{
  const handler = {} as typeof import("../../src/app/blog/page.js")
  handler satisfies AppPageConfig<"/blog">
}

// Validate ../../src/app/contato/page.tsx
{
  const handler = {} as typeof import("../../src/app/contato/page.js")
  handler satisfies AppPageConfig<"/contato">
}

// Validate ../../src/app/ebook/[slug]/page.tsx
{
  const handler = {} as typeof import("../../src/app/ebook/[slug]/page.js")
  handler satisfies AppPageConfig<"/ebook/[slug]">
}

// Validate ../../src/app/ebooks/page.tsx
{
  const handler = {} as typeof import("../../src/app/ebooks/page.js")
  handler satisfies AppPageConfig<"/ebooks">
}

// Validate ../../src/app/obrigado-lead/page.tsx
{
  const handler = {} as typeof import("../../src/app/obrigado-lead/page.js")
  handler satisfies AppPageConfig<"/obrigado-lead">
}

// Validate ../../src/app/obrigado/page.tsx
{
  const handler = {} as typeof import("../../src/app/obrigado/page.js")
  handler satisfies AppPageConfig<"/obrigado">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/politica-privacidade/page.tsx
{
  const handler = {} as typeof import("../../src/app/politica-privacidade/page.js")
  handler satisfies AppPageConfig<"/politica-privacidade">
}

// Validate ../../src/app/sobre/page.tsx
{
  const handler = {} as typeof import("../../src/app/sobre/page.js")
  handler satisfies AppPageConfig<"/sobre">
}

// Validate ../../src/app/termos/page.tsx
{
  const handler = {} as typeof import("../../src/app/termos/page.js")
  handler satisfies AppPageConfig<"/termos">
}

// Validate ../../src/app/api/interactions/route.ts
{
  const handler = {} as typeof import("../../src/app/api/interactions/route.js")
  handler satisfies RouteHandlerConfig<"/api/interactions">
}

// Validate ../../src/app/api/push/send/route.ts
{
  const handler = {} as typeof import("../../src/app/api/push/send/route.js")
  handler satisfies RouteHandlerConfig<"/api/push/send">
}

// Validate ../../src/app/api/push/subscribe/route.ts
{
  const handler = {} as typeof import("../../src/app/api/push/subscribe/route.js")
  handler satisfies RouteHandlerConfig<"/api/push/subscribe">
}

// Validate ../../src/app/api/push/unsubscribe/route.ts
{
  const handler = {} as typeof import("../../src/app/api/push/unsubscribe/route.js")
  handler satisfies RouteHandlerConfig<"/api/push/unsubscribe">
}

// Validate ../../src/app/api/recipes/stats/route.ts
{
  const handler = {} as typeof import("../../src/app/api/recipes/stats/route.js")
  handler satisfies RouteHandlerConfig<"/api/recipes/stats">
}

// Validate ../../src/app/lead/route.ts
{
  const handler = {} as typeof import("../../src/app/lead/route.js")
  handler satisfies RouteHandlerConfig<"/lead">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
