{"version":3,"sources":["turbopack:///[project]/src/lib/supabase.js","turbopack:///[project]/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Configurações do Supabase\n// Em produção, essas variáveis devem vir do arquivo .env\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://placeholder.supabase.co'\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBsYWNlaG9sZGVyIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NDA5OTUyMDAsImV4cCI6MTk1NjU3MTIwMH0.placeholder'\n\n// Warn if env vars are missing to avoid confusing 403s due to placeholder credentials\nif (\n  typeof window !== 'undefined' &&\n  (supabaseUrl.includes('placeholder') || supabaseAnonKey.endsWith('.placeholder'))\n) {\n  // eslint-disable-next-line no-console\n  console.error(\n    '[Supabase] Credenciais ausentes. Configure VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY. Usar placeholders causará 403.'\n  )\n}\n\n// Criar cliente Supabase\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  },\n  global: {\n    headers: {\n      Accept: 'application/json',\n      apikey: supabaseAnonKey\n    }\n  }\n})\n\n// Funções auxiliares para autenticação\nexport const auth = {\n  // Registrar novo usuário\n  signUp: async (email, password, userData = {}) => {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: userData\n      }\n    })\n    return { data, error }\n  },\n\n  // Login\n  signIn: async (email, password) => {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    })\n    return { data, error }\n  },\n\n  // Login com OAuth (Google, GitHub, etc.)\n  signInWithOAuth: async (provider) => {\n    const { data, error } = await supabase.auth.signInWithOAuth({\n      provider,\n      options: {\n        redirectTo: `${window.location.origin}/auth/callback`\n      }\n    })\n    return { data, error }\n  },\n\n  // Logout\n  signOut: async () => {\n    const { error } = await supabase.auth.signOut()\n    return { error }\n  },\n\n  // Obter usuário atual\n  getCurrentUser: async () => {\n    const { data: { user }, error } = await supabase.auth.getUser()\n    return { user, error }\n  },\n\n  // Obter sessão atual\n  getCurrentSession: async () => {\n    const { data: { session }, error } = await supabase.auth.getSession()\n    return { session, error }\n  },\n\n  // Resetar senha\n  resetPassword: async (email) => {\n    const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/auth/reset-password`\n    })\n    return { data, error }\n  },\n\n  // Atualizar senha\n  updatePassword: async (password) => {\n    const { data, error } = await supabase.auth.updateUser({\n      password\n    })\n    return { data, error }\n  }\n}\n\n// Funções para gerenciar receitas\nexport const recipes = {\n  // Buscar todas as receitas publicadas\n  getPublished: async (limit = 10, offset = 0) => {\n    const { data, error } = await supabase\n      .from('recipes')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .eq('status', 'published')\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    \n    return { data, error }\n  },\n\n  // Buscar receita por slug\n  getBySlug: async (slug) => {\n    const { data, error } = await supabase\n      .from('recipes')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url,\n          bio\n        ),\n        categories (\n          name,\n          slug\n        ),\n        recipe_ingredients (\n          *,\n          ingredients (\n            name,\n            unit\n          )\n        ),\n        recipe_instructions (\n          *\n        )\n      `)\n      .eq('slug', slug)\n      .eq('status', 'published')\n      .maybeSingle()\n    \n    return { data, error }\n  },\n\n  // Buscar receitas por categoria\n  getByCategory: async (categorySlug, limit = 10, offset = 0) => {\n    const { data, error } = await supabase\n      .from('recipes')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url\n        ),\n        categories!inner (\n          name,\n          slug\n        )\n      `)\n      .eq('categories.slug', categorySlug)\n      .eq('status', 'published')\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    \n    return { data, error }\n  },\n\n  // Buscar receitas (com filtros)\n  search: async (query, filters = {}) => {\n    let queryBuilder = supabase\n      .from('recipes')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url\n        ),\n        categories!inner (\n          name,\n          slug\n        )\n      `)\n      .eq('status', 'published')\n\n    // Busca por texto\n    if (query) {\n      queryBuilder = queryBuilder.or(`title.ilike.%${query}%,description.ilike.%${query}%`)\n    }\n\n    // Filtro por categoria\n    if (filters.category) {\n      queryBuilder = queryBuilder.eq('categories.slug', filters.category)\n    }\n\n    // Filtro por dificuldade\n    if (filters.difficulty) {\n      queryBuilder = queryBuilder.eq('difficulty', filters.difficulty)\n    }\n\n    // Filtro por tempo de preparo\n    if (filters.maxTime) {\n      queryBuilder = queryBuilder.lte('total_time', filters.maxTime)\n    }\n\n    const { data, error } = await queryBuilder\n      .order('created_at', { ascending: false })\n      .limit(20)\n\n    return { data, error }\n  },\n\n  // Criar nova receita (apenas para usuários autenticados)\n  create: async (recipeData) => {\n    const { data, error } = await supabase\n      .from('recipes')\n      .insert([recipeData])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Buscar receita por ID\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('recipes')\n      .select(`\n        *,\n        profiles:author_id(full_name, avatar_url),\n        categories(name, slug)\n      `)\n      .eq('id', id)\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar receita\n  update: async (id, recipeData) => {\n    const { data, error } = await supabase\n      .from('recipes')\n      .update(recipeData)\n      .eq('id', id)\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Deletar receita\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('recipes')\n      .delete()\n      .eq('id', id)\n    \n    return { error }\n  },\n\n  // Buscar todas as receitas para admin (incluindo drafts)\n  getAllForAdmin: async (limit = 50, offset = 0) => {\n    try {\n      const { data, error } = await supabase\n        .from('recipes')\n        .select(`\n          *,\n          profiles:author_id (\n            full_name,\n            avatar_url\n          ),\n          categories (\n            name,\n            slug\n          )\n        `)\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1)\n      \n      if (error) throw error\n      return { data: data || [], error: null }\n    } catch (error) {\n      console.error('Error fetching recipes for admin:', error)\n      return { data: [], error }\n    }\n  },\n\n  getAll: async (limit = 50, offset = 0) => {\n    return recipes.getAllForAdmin(limit, offset)\n  }\n}\n\n// Funções para gerenciar categorias\nexport const categories = {\n  // Buscar todas as categorias (apenas ativas - para uso público)\n  getAll: async () => {\n    const { data, error } = await supabase\n      .from('categories')\n      .select('*')\n      .eq('is_active', true)\n      .order('sort_order', { ascending: true })\n    \n    return { data, error }\n  },\n\n  // Buscar todas as categorias (incluindo inativas - para admin)\n  getAllForAdmin: async () => {\n    try {\n      const { data, error } = await supabase\n        .from('categories')\n        .select('*')\n        .order('sort_order', { ascending: true })\n      \n      if (error) throw error\n      return { data: data || [], error: null }\n    } catch (error) {\n      console.error('Error fetching categories for admin:', error)\n      return { data: [], error }\n    }\n  },\n\n  // Buscar categoria por slug\n  getBySlug: async (slug) => {\n    const { data, error } = await supabase\n      .from('categories')\n      .select('*')\n      .eq('slug', slug)\n      .eq('is_active', true)\n      .single()\n    \n    return { data, error }\n  },\n\n  // Criar nova categoria\n  create: async (categoryData) => {\n    const { data, error } = await supabase\n      .from('categories')\n      .insert([categoryData])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar categoria\n  update: async (id, categoryData) => {\n    const { data, error } = await supabase\n      .from('categories')\n      .update(categoryData)\n      .eq('id', id)\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Deletar categoria\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('categories')\n      .delete()\n      .eq('id', id)\n    \n    return { error }\n  }\n}\n\n// Funções para gerenciar perfis de usuário\nexport const profiles = {\n  // Buscar perfil do usuário atual\n  getCurrent: async () => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { data: null, error: 'Usuário não autenticado' }\n\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', user.id)\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar perfil\n  update: async (profileData) => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { data: null, error: 'Usuário não autenticado' }\n\n    const { data, error } = await supabase\n      .from('profiles')\n      .update(profileData)\n      .eq('id', user.id)\n      .select()\n      .single()\n    \n    return { data, error }\n  }\n}\n\n// Funções para gerenciar favoritos\nexport const userFavorites = {\n  // Adicionar receita aos favoritos\n  add: async (recipeId) => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { data: null, error: 'Usuário não autenticado' }\n\n    const { data, error } = await supabase\n      .from('user_favorites')\n      .insert([{ user_id: user.id, recipe_id: recipeId }])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Remover receita dos favoritos\n  remove: async (recipeId) => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { error: 'Usuário não autenticado' }\n\n    const { error } = await supabase\n      .from('user_favorites')\n      .delete()\n      .eq('user_id', user.id)\n      .eq('recipe_id', recipeId)\n    \n    return { error }\n  },\n\n  // Verificar se receita está nos favoritos\n  check: async (recipeId) => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { data: false, error: null }\n\n    const { data, error } = await supabase\n      .from('user_favorites')\n      .select('id')\n      .eq('user_id', user.id)\n      .eq('recipe_id', recipeId)\n      .single()\n    \n    return { data: !!data, error }\n  },\n\n  // Buscar receitas favoritas do usuário\n  getUserFavorites: async () => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { data: [], error: 'Usuário não autenticado' }\n\n    const { data, error } = await supabase\n      .from('user_favorites')\n      .select(`\n        *,\n        recipes (\n          *,\n          profiles:author_id (\n            full_name,\n            avatar_url\n          ),\n          categories (\n            name,\n            slug\n          )\n        )\n      `)\n      .eq('user_id', user.id)\n      .order('created_at', { ascending: false })\n    \n    return { data, error }\n  }\n}\n\n// Funções para upload de arquivos\nexport const storage = {\n  // Upload de imagem\n  uploadImage: async (file, bucket = 'recipe-images', path = '') => {\n    const fileExt = file.name.split('.').pop()\n    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`\n    const filePath = path ? `${path}/${fileName}` : fileName\n\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .upload(filePath, file)\n\n    if (error) return { data: null, error }\n\n    // Obter URL pública\n    const { data: { publicUrl } } = supabase.storage\n      .from(bucket)\n      .getPublicUrl(filePath)\n\n    return { data: { path: filePath, publicUrl }, error: null }\n  },\n\n  // Deletar arquivo\n  deleteFile: async (path, bucket = 'recipe-images') => {\n    const { error } = await supabase.storage\n      .from(bucket)\n      .remove([path])\n\n    return { error }\n  },\n\n  // Obter URL pública\n  getPublicUrl: (path, bucket = 'recipe-images') => {\n    const { data: { publicUrl } } = supabase.storage\n      .from(bucket)\n      .getPublicUrl(path)\n\n    return publicUrl\n  }\n}\n\n// Funções para gerenciar cursos\nexport const courses = {\n  // Buscar todos os cursos\n  getAll: async (limit = 10, offset = 0) => {\n    const { data, error } = await supabase\n      .from('courses')\n      .select(`\n        *,\n        profiles:instructor_id (\n          full_name,\n          avatar_url\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    \n    return { data, error }\n  },\n\n  // Buscar cursos publicados\n  getPublished: async (limit = 10, offset = 0) => {\n    const { data, error } = await supabase\n      .from('courses')\n      .select(`\n        *,\n        profiles:instructor_id (\n          full_name,\n          avatar_url\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .eq('status', 'published')\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    \n    return { data, error }\n  },\n\n  // Buscar curso por slug\n  getBySlug: async (slug) => {\n    const { data, error } = await supabase\n      .from('courses')\n      .select(`\n        *,\n        profiles:instructor_id (\n          full_name,\n          avatar_url,\n          bio\n        ),\n        categories (\n          name,\n          slug\n        ),\n        course_modules (\n          *,\n          course_lessons (\n            *\n          )\n        )\n      `)\n      .eq('slug', slug)\n      .eq('status', 'published')\n      .single()\n    \n    return { data, error }\n  },\n\n  // Criar curso\n  create: async (courseData) => {\n    const { data, error } = await supabase\n      .from('courses')\n      .insert([courseData])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Buscar curso por ID\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('courses')\n      .select(`\n        *,\n        profiles:instructor_id(full_name, avatar_url),\n        categories(name, slug)\n      `)\n      .eq('id', id)\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar curso\n  update: async (id, courseData) => {\n    const { data, error } = await supabase\n      .from('courses')\n      .update(courseData)\n      .eq('id', id)\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Deletar curso\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('courses')\n      .delete()\n      .eq('id', id)\n    \n    return { error }\n  }\n}\n\n// Funções para gerenciar módulos de curso\nexport const courseModules = {\n  // Buscar módulos por curso\n  getByCourse: async (courseId) => {\n    const { data, error } = await supabase\n      .from('course_modules')\n      .select(`\n        *,\n        course_lessons (\n          *\n        )\n      `)\n      .eq('course_id', courseId)\n      .order('sort_order', { ascending: true })\n    \n    return { data, error }\n  },\n\n  create: async (moduleData) => {\n    const { data, error } = await supabase\n      .from('course_modules')\n      .insert([moduleData])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar módulo\n  update: async (id, moduleData) => {\n    const { data, error } = await supabase\n      .from('course_modules')\n      .update(moduleData)\n      .eq('id', id)\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Deletar módulo\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('course_modules')\n      .delete()\n      .eq('id', id)\n    \n    return { error }\n  }\n}\n\n// Funções para gerenciar aulas\nexport const courseLessons = {\n  // Buscar aulas por módulo\n  getByModule: async (moduleId) => {\n    const { data, error } = await supabase\n      .from('course_lessons')\n      .select('*')\n      .eq('module_id', moduleId)\n      .order('sort_order', { ascending: true })\n    \n    return { data, error }\n  },\n\n  create: async (lessonData) => {\n    const { data, error } = await supabase\n      .from('course_lessons')\n      .insert([lessonData])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar aula\n  update: async (id, lessonData) => {\n    const { data, error } = await supabase\n      .from('course_lessons')\n      .update(lessonData)\n      .eq('id', id)\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Deletar aula\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('course_lessons')\n      .delete()\n      .eq('id', id)\n    \n    return { error }\n  }\n}\n\n// Funções para gerenciar matrículas\nexport const courseEnrollments = {\n  // Buscar matrículas por curso\n  getByCourse: async (courseId) => {\n    const { data, error } = await supabase\n      .from('course_enrollments')\n      .select(`\n        *,\n        profiles (\n          full_name,\n          avatar_url,\n          email\n        )\n      `)\n      .eq('course_id', courseId)\n      .order('enrolled_at', { ascending: false })\n    \n    return { data, error }\n  },\n\n  enroll: async (courseId, userId) => {\n    const { data, error } = await supabase\n      .from('course_enrollments')\n      .insert([{ course_id: courseId, user_id: userId }])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Verificar se usuário está matriculado\n  checkEnrollment: async (courseId, userId) => {\n    const { data, error } = await supabase\n      .from('course_enrollments')\n      .select('id')\n      .eq('course_id', courseId)\n      .eq('user_id', userId)\n      .single()\n    \n    return { data: !!data, error }\n  }\n}\n\n// Funções para gerenciar posts do blog\nexport const blogPosts = {\n  // Buscar todos os posts\n  getAll: async (limit = 10, offset = 0) => {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    \n    return { data, error }\n  },\n\n  // Buscar posts publicados\n  getPublished: async (limit = 10, offset = 0) => {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .eq('status', 'published')\n      .order('published_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    \n    return { data, error }\n  },\n\n  // Buscar post por slug\n  getBySlug: async (slug) => {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url,\n          bio\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .eq('slug', slug)\n      .eq('status', 'published')\n      .single()\n    \n    return { data, error }\n  },\n\n  create: async (postData) => {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .insert([postData])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Buscar post por ID\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select(`\n        *,\n        profiles:author_id(full_name, avatar_url),\n        categories(name, slug)\n      `)\n      .eq('id', id)\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar post\n  update: async (id, postData) => {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .update(postData)\n      .eq('id', id)\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Deletar post\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('blog_posts')\n      .delete()\n      .eq('id', id)\n    \n    return { error }\n  }\n}\n\n// Funções para gerenciar usuários (admin)\nexport const users = {\n  // Buscar todos os usuários\n  getAll: async (limit = 10, offset = 0) => {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    \n    return { data, error }\n  },\n\n  // Buscar usuário por ID\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', id)\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar role do usuário\n  updateRole: async (userId, role) => {\n    const { data, error } = await supabase\n      .from('profiles')\n      .update({ role })\n      .eq('id', userId)\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar perfil do usuário\n  updateProfile: async (userId, profileData) => {\n    const { data, error } = await supabase\n      .from('profiles')\n      .update(profileData)\n      .eq('id', userId)\n      .select()\n      .single()\n    \n    return { data, error }\n  }\n}\n\n// Funções para analytics\nexport const analytics = {\n  // Buscar estatísticas do dashboard\n  getDashboardStats: async () => {\n    try {\n      const [recipesResult, usersResult, coursesResult, viewsResult] = await Promise.all([\n        supabase.from('recipes').select('id', { count: 'exact', head: true }),\n        supabase.from('profiles').select('id', { count: 'exact', head: true }),\n        supabase.from('courses').select('id', { count: 'exact', head: true }),\n        supabase.from('recipe_analytics').select('views')\n      ])\n\n      const totalViews = viewsResult.data?.reduce((sum, item) => sum + (item.views || 0), 0) || 0\n\n      return {\n        data: {\n          totalRecipes: recipesResult.count || 0,\n          totalUsers: usersResult.count || 0,\n          totalCourses: coursesResult.count || 0,\n          totalViews: totalViews\n        },\n        error: null\n      }\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error)\n      return {\n        data: {\n          totalRecipes: 0,\n          totalUsers: 0,\n          totalCourses: 0,\n          totalViews: 0\n        },\n        error: null\n      }\n    }\n  },\n\n  // Registrar visualização de receita\n  recordRecipeView: async (recipeId, userId = null) => {\n    const { data, error } = await supabase\n      .from('recipe_analytics')\n      .insert([{\n        recipe_id: recipeId,\n        user_id: userId,\n        event_type: 'view'\n      }])\n    \n    return { data, error }\n  },\n\n  // Registrar like em receita\n  recordRecipeLike: async (recipeId, userId) => {\n    const { data, error } = await supabase\n      .from('recipe_analytics')\n      .insert([{\n        recipe_id: recipeId,\n        user_id: userId,\n        event_type: 'like'\n      }])\n    \n    return { data, error }\n  },\n\n  // Buscar receitas mais populares\n  getPopularRecipes: async (limit = 10) => {\n    const { data, error } = await supabase\n      .from('recipe_analytics')\n      .select(`\n        recipe_id,\n        recipes (\n          title,\n          slug,\n          image_url\n        )\n      `)\n      .eq('event_type', 'view')\n      .order('created_at', { ascending: false })\n      .limit(limit)\n    \n    return { data, error }\n  }\n}\n\n// Funções para ingredientes\nexport const ingredients = {\n  // Buscar todos os ingredientes\n  getAll: async () => {\n    const { data, error } = await supabase\n      .from('ingredients')\n      .select('*')\n      .order('name', { ascending: true })\n    \n    return { data, error }\n  },\n\n  create: async (ingredientData) => {\n    const { data, error } = await supabase\n      .from('ingredients')\n      .insert([ingredientData])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Atualizar ingrediente\n  update: async (id, ingredientData) => {\n    const { data, error } = await supabase\n      .from('ingredients')\n      .update(ingredientData)\n      .eq('id', id)\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Deletar ingrediente\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('ingredients')\n      .delete()\n      .eq('id', id)\n    \n    return { error }\n  }\n}\n\nexport const settings = {\n  // Buscar todas as configurações\n  getAll: async () => {\n    const { data, error } = await supabase\n      .from('settings')\n      .select('*')\n    \n    return { data, error }\n  },\n\n  // Buscar configuração por chave\n  get: async (key) => {\n    const { data, error } = await supabase\n      .from('settings')\n      .select('*')\n      .eq('key', key)\n      .single()\n    \n    return { data, error }\n  },\n\n  set: async (key, value, type = 'string') => {\n    const { data, error } = await supabase\n      .from('settings')\n      .upsert([{ key, value, type }])\n      .select()\n      .single()\n    \n    return { data, error }\n  },\n\n  // Deletar configuração\n  delete: async (key) => {\n    const { data, error } = await supabase\n      .from('settings')\n      .delete()\n      .eq('key', key)\n    \n    return { data, error }\n  }\n}\n\n// E-books\nexport const ebooks = {\n  getAll: async (limit = 20, offset = 0) => {\n    const { data, error } = await supabase\n      .from('ebooks')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    return { data, error }\n  },\n  getPublished: async (limit = 20, offset = 0) => {\n    const { data, error } = await supabase\n      .from('ebooks')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .eq('status', 'published')\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1)\n    return { data, error }\n  },\n  getBySlug: async (slug) => {\n    const { data, error } = await supabase\n      .from('ebooks')\n      .select(`\n        *,\n        profiles:author_id (\n          full_name,\n          avatar_url,\n          bio\n        ),\n        categories (\n          name,\n          slug\n        )\n      `)\n      .eq('slug', slug)\n      .eq('status', 'published')\n      .maybeSingle()\n    return { data, error }\n  },\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('ebooks')\n      .select(`\n        *,\n        profiles:author_id(full_name, avatar_url),\n        categories(name, slug)\n      `)\n      .eq('id', id)\n      .single()\n    return { data, error }\n  },\n  create: async (ebookData) => {\n    const { data, error } = await supabase\n      .from('ebooks')\n      .insert([ebookData])\n      .select()\n      .single()\n    return { data, error }\n  },\n  update: async (id, ebookData) => {\n    const { data, error } = await supabase\n      .from('ebooks')\n      .update(ebookData)\n      .eq('id', id)\n      .select()\n      .single()\n    return { data, error }\n  },\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('ebooks')\n      .delete()\n      .eq('id', id)\n    return { error }\n  }\n}\n\nexport const ebookPurchases = {\n  purchase: async (ebookId, { amount, method = 'stripe', transactionId = null } = {}) => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { data: null, error: 'Usuário não autenticado' }\n    const { data, error } = await supabase\n      .from('ebook_purchases')\n      .insert([{ ebook_id: ebookId, user_id: user.id, amount: amount || 0, payment_method: method, transaction_id: transactionId, status: 'paid' }])\n      .select()\n      .single()\n    return { data, error }\n  },\n  getByUser: async () => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { data: [], error: 'Usuário não autenticado' }\n    const { data, error } = await supabase\n      .from('ebook_purchases')\n      .select(`\n        *,\n        ebooks(title, slug, cover_image, price)\n      `)\n      .eq('user_id', user.id)\n      .order('purchased_at', { ascending: false })\n    return { data, error }\n  },\n  hasPurchased: async (ebookId) => {\n    const { data: { user } } = await supabase.auth.getUser()\n    if (!user) return { data: false, error: null }\n    const { data, error } = await supabase\n      .from('ebook_purchases')\n      .select('id')\n      .eq('ebook_id', ebookId)\n      .eq('user_id', user.id)\n      .maybeSingle()\n    return { data: !!data, error }\n  }\n}\n\nexport default supabase\n\n","import { createClient } from '@supabase/supabase-js';\nexport { recipes, categories, courses, users, analytics, settings, ebooks, ebookPurchases, blogPosts } from './supabase.js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);"],"names":[],"mappings":"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"}